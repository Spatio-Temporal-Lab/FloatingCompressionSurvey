#include "Units.hpp"
#include "Reinterpret.hpp"
#include "Hacky.hpp"
#include "datablock/schemes/CScheme.hpp"
#include "datablock/schemes/CSchemePicker.hpp"
#include "storage/Chunk.hpp"
#include "bitpack.h"
// -------------------------------------------------------------------------------------
#include "gflags/gflags.h"
#include "spdlog/spdlog.h"
#include "double-conversion/fast-dtoa.h"
#include "roaring/roaring.hh"
// -------------------------------------------------------------------------------------
#include <iomanip>
#include <cmath>
#include <unordered_map>
#include <bitset>
// -------------------------------------------------------------------------------------
namespace cengine {
namespace db {
namespace v2 {
namespace d {
// -------------------------------------------------------------------------------------
static const double exact_powers_of_ten[] = {
  1.0,  // 10^0
  10.0, 100.0, 1000.0, 10000.0, 100000.0, 1000000.0, 10000000.0, 100000000.0, 1000000000.0, 10000000000.0,  // 10^10
  100000000000.0, 1000000000000.0, 10000000000000.0, 100000000000000.0, 1000000000000000.0, 10000000000000000.0, 100000000000000000.0, 1000000000000000000.0, 10000000000000000000.0, 100000000000000000000.0,  // 10^20
  1000000000000000000000.0,
  // 10^22 = 0x21e19e0c9bab2400000 = 0x878678326eac9 * 2^22
  10000000000000000000000.0
};
// -------------------------------------------------------------------------------------
double Hacky::expectedCompressionRatio(DoubleStats &stats)
{
   return 1.1;
}
// -------------------------------------------------------------------------------------
u32 Hacky::compress(const DOUBLE *src, const BITMAP *, u8 *dest, DoubleStats &stats, u8)
{
   // -------------------------------------------------------------------------------------
   auto &col_struct = *reinterpret_cast<HackyStructure *>(dest);
   auto write_ptr = col_struct.data;
   // -------------------------------------------------------------------------------------
   // Init gdouble
   char buffer_container[1024];
   double_conversion::Vector<char> buffer(buffer_container, 1024);
   int length = 0;
   int point = 0;
   // -------------------------------------------------------------------------------------
   vector<u64> printed_integer;
   vector<u32> printed_point;
   vector<u32> flags;
   vector<DOUBLE> exceptions;
   u32 failure_counter = 0;
   const u8 flag_neg = 0, flag_pos = 1, flag_fail = 2;
   // -------------------------------------------------------------------------------------
   for ( u32 row_i = 0; row_i < stats.tuple_count; row_i++ ) {
      point = 0;
      auto current_double = src[row_i];
      if ( current_double == 0 ) {
         flags.push_back(3);
      } else {
         if(current_double < 0)
            current_double = std::copysign(current_double, +1.0);
         int status = FastDtoa(current_double, double_conversion::FAST_DTOA_SHORTEST, 0,
                               buffer, &length, &point);
         if ( status == 0 ) {
            exceptions.push_back(current_double);
            flags.push_back(flag_fail);
            failure_counter++;
            continue;
         }
         failure_counter += !status;
         printed_integer.push_back(std::stoull(buffer.start()));
         printed_point.push_back(point);
//         {
//            u64 sd = std::stoull(buffer.start());
//            u32 length = CU(std::floor(std::log10(sd)) + 1);
//            s32 exponent = point - length;
//            double base_double = CD(sd);
//            if ( exponent > 0 ) {
//               check(status == 0 || current_double == base_double * exact_powers_of_ten[exponent]);
//            } else {
//               check(status == 0 || current_double == base_double / exact_powers_of_ten[-exponent]);
//            }
//         }
      }
   }
   IntegerSchemePicker::compress(printed_point.data(), nullptr, write_ptr, printed_point.size(), 2, col_struct.integers_offset, col_struct.points_scheme_code);
   write_ptr += col_struct.integers_offset;
   // -------------------------------------------------------------------------------------
   write_ptr += bitnpack64(printed_integer.data(), printed_integer.size(), write_ptr);
   // -------------------------------------------------------------------------------------
   // hack the numbers
   write_ptr += exceptions.size() * 8;
   write_ptr += static_cast<u32 >(stats.tuple_count * 2.0 / 8.0);
   return write_ptr - dest;
}
// -------------------------------------------------------------------------------------
void Hacky::decompress(DOUBLE *dest, BitmapWrapper *, const u8 *src, u32 tuple_count, u32 level)
{
   auto &col_struct = *reinterpret_cast<const HackyStructure *>(src);
   // -------------------------------------------------------------------------------------
   thread_local std::vector<std::vector<u32>> printed_point_v;
   auto printed_point = get_data(printed_point_v, tuple_count, level);
   IntegerScheme &scheme = IntegerSchemePicker::MyTypeWrapper::getScheme(col_struct.points_scheme_code);
   scheme.decompress(printed_point, nullptr, col_struct.data, tuple_count, level+1);
   // -------------------------------------------------------------------------------------
   thread_local std::vector<std::vector<u64>> printed_integer_v;
   auto printed_integer(printed_integer_v, tuple_count, level);
   bitnunpack64(const_cast<u8 *>(col_struct.data + col_struct.integers_offset), tuple_count, printed_integer);
   // -------------------------------------------------------------------------------------
   for ( u32 row_i = 0; row_i < tuple_count; row_i++ ) {
      auto sd = printed_integer[row_i];
      u32 point = printed_point[row_i];
      if ( sd == 0 && point == 0 ) {
         dest[row_i] = 0.0;
      } else {
         u32 length = CU(std::floor(std::log10(printed_integer[row_i])) + 1);
         s32 exponent = point - length;
         double base_double = CD(sd);
         if ( exponent > 0 ) {
            dest[row_i] = base_double * exact_powers_of_ten[exponent];
         } else {
            dest[row_i] = base_double / exact_powers_of_ten[-exponent];
         }
      }
   }
}
// -------------------------------------------------------------------------------------
}
}
}
}
// -------------------------------------------------------------------------------------
